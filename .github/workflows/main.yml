name: CI

on:
  push:
    branches: [ main ]
    tags: [ "*" ]
  pull_request:
    branches: [ main ]

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/checkout@v4

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ github.ref_name }}

  python-examples:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install matplotlib
          python -m pip install numpy
          python -m pip install scipy
          python -m pip install ximu3csv

      - name: Install Python package
        run: python -m pip install .

      - name: Run examples
        working-directory: Examples
        run: |
          python animate_body.py dont_block
          python animate_body_with_hands.py dont_block
          python animate_body_with_wheelchair.py dont_block
          python animate_body_with_wheelchair_and_hands.py dont_block
          python animate_left_hand.py dont_block
          python animate_right_hand.py dont_block
          python logged_lower_body.py dont_block

  python-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine==6.0.1
          python -m pip install build
        # use twine v6.0.1 because bug in latest version (v6.1.0)

      - name: Create distributions
        run: python -m build

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Publish Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYTHON_TOKEN }}
        run: python -m twine upload --verbose --repository pypi dist/* --skip-existing

  imu-mocap-viewer-macos:
    runs-on: macos-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: "IMU Mocap Viewer/Library"
          key: Library-macOS
          restore-keys: Library-

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: "./IMU Mocap Viewer"
          targetPlatform: StandaloneOSX
          allowDirtyBuild: true
          buildsPath: "build/"
          buildName: 'IMU Mocap Viewer'
          versioning: Custom
          version: '1.2.0'

      - name: Install certificate # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development#add-a-step-to-your-workflow
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ""
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH             

      - name: Sign and notarize
        run: |
          chmod -R a+xr "build/StandaloneOSX/IMU Mocap Viewer.app"
          codesign --deep --force --options runtime --timestamp --sign 29X883CFTW "build/StandaloneOSX/IMU Mocap Viewer.app"
          brew install create-dmg
          create-dmg \
          --volname "IMU-Mocap-Viewer" \
          --background "installer_background.png" \
          --window-pos 200 120 \
          --window-size 600 320 \
          --icon-size 100 \
          --icon "IMU Mocap Viewer.app" 140 130 \
          --hide-extension "IMU Mocap Viewer.app" \
          --app-drop-link 450 125 \
          "IMU-Mocap-Viewer.dmg" \
          "build/StandaloneOSX/IMU Mocap Viewer.app"
          xcrun notarytool submit "IMU-Mocap-Viewer.dmg" --team-id 29X883CFTW --apple-id ${{ secrets.AC_USERNAME }} --password ${{ secrets.AC_PASSWORD }} --wait
          xcrun stapler staple "IMU-Mocap-Viewer.dmg"       

      - uses: actions/upload-artifact@v4
        with:
          name: IMU-Mocap-Viewer.dmg
          path: IMU-Mocap-Viewer.dmg

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} IMU-Mocap-Viewer.dmg

  imu-mocap-viewer-windows:
    runs-on: windows-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: "IMU Mocap Viewer/Library"
          key: Library-Windows
          restore-keys: Library-

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: "./IMU Mocap Viewer"
          targetPlatform: StandaloneWindows64
          allowDirtyBuild: true
          buildsPath: "build/"
          buildName: 'IMU Mocap Viewer'
          versioning: Custom
          version: '1.2.0'

      # https://docs.digicert.com/zh/digicert-keylocker/ci-cd-integrations/plugins/github-custom-action-for-keypair-signing.html
      - name: Setup Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert Keylocker Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setup Keylocker KSP
        run: |
          curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/Keylockertools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o Keylockertools-windows-x64.msi
          msiexec /i Keylockertools-windows-x64.msi /quiet /qn
          smksp_registrar.exe list
          smctl.exe keypair ls
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
        shell: cmd

      - name: Certificates Sync
        run: |
          smctl windows certsync
        shell: cmd

      - name: Install Inno Setup
        run: |
          curl -L https://jrsoftware.org/download.php/is.exe -o is.exe
          .\is.exe /VERYSILENT        

      - name: Skip *DoNotShip files
        run: Get-ChildItem -Recurse -Directory -Filter "*DoNotShip" | Remove-Item -Recurse -Force

      - name: Create installer (signed)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "/DENABLE_SIGNING" "/Ssigntool=signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 `$f" WindowsInstaller.iss

      - name: Create installer (unsigned)
        if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"  WindowsInstaller.iss

      - uses: actions/upload-artifact@v4
        with:
          name: IMU-Mocap-Viewer-Setup.exe
          path: Output/IMU-Mocap-Viewer-Setup.exe

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} Output/IMU-Mocap-Viewer-Setup.exe

  imu-mocap-viewer-ubuntu:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: "IMU Mocap Viewer/Library"
          key: Library-Ubuntu
          restore-keys: Library-

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: "./IMU Mocap Viewer"
          targetPlatform: StandaloneLinux64
          allowDirtyBuild: true
          buildsPath: "build/"
          buildName: 'IMU Mocap Viewer'
          versioning: Custom
          version: '1.2.0'

      - name: Remove DoNotShip
        run: sudo rm -rf build/StandaloneLinux64/*DoNotShip

      - uses: actions/upload-artifact@v4
        with:
          name: IMU-Mocap-Viewer-Ubuntu
          path: build/StandaloneLinux64

      - name: Zip
        uses: vimtor/action-zip@v1.2
        with:
          files: build/StandaloneLinux64
          dest: IMU-Mocap-Viewer.zip

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} IMU-Mocap-Viewer.zip
